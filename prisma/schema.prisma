// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//#region User Models

model Cuenta {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usuario {
  id          String                @id @default(cuid())
  nombre      String
  cedula      String?               @unique
  tipo_cedula Documentos_Identidad?

  email         String?     @unique
  contrasena    String?     @map("password")
  facialID      String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  rol_nombre    String      @default("Basico")
  accounts      Cuenta[]
  sessions      Session[]
  rol           Rol         @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)
  auditoria     Auditoria[]
  estado        String?

  @@map("User")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Rol {
  id          Int              @id @default(autoincrement())
  rol         String           @unique
  descripcion String
  usuarios    Usuario[]
  permisos    Roles_Permisos[]
}

model Roles_Permisos {
  id          Int      @id @default(autoincrement())
  rol_nombre  String
  permiso_key String
  active      Boolean?
  rol         Rol      @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)
  permiso     Permiso  @relation(fields: [permiso_key], references: [key], onDelete: Cascade, onUpdate: Cascade)
}

model Permiso {
  id          Int    @id @default(autoincrement())
  permiso     String
  descripcion String

  key   String           @unique
  roles Roles_Permisos[]
}

//#endregion

enum Documentos_Identidad {
  V
  E
  J
  G
  R
  P
  Partida_Nacimiento
}

enum Generos {
  Femenino
  Masculino
}

model Auditoria {
  id         Int     @id @default(autoincrement())
  id_usuario String
  usuario    Usuario @relation(fields: [id_usuario], references: [id])
  accion     String

  fecha_realizado      DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

model Representative {
  id Int @id @default(autoincrement())

  names     String
  lastNames String
  birthDate DateTime?

  relationship  String
  profession    String?
  work_address  String?
  work_position String?
  gender        Genders
  phone_number  String
  email         String?
  address       String?
  country       String
  city          String
  state         String
  civil_status  String
  is_working    Boolean

  id_document_type     Documentos_Identidad
  id_document_number   String               @unique
  id_document_image    String?
  representative_image String?

  facebook  String?
  instagram String?
  tiktok    String?
  youtube   String?

  students Representatives_Students[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Genders {
  Masculino
  Femenino
}

model Level {
  id          Int        @id @default(autoincrement())
  modalidad   Modalities
  name        String
  description String?
  order       Int?
  courses     Courses[]
}

model Student {
  id Int @id @default(autoincrement())

  uuid      Int        @unique
  codigo    String     @unique
  names     String
  lastNames String
  birthDate DateTime?
  gender    Genders
  modalidad Modalities

  school       String?
  birth_place  String?
  can_medicate Boolean
  medicine     String?

  phone_number               String?
  email                      String?
  address                    String?
  country                    String
  city                       String
  state                      String
  extracurricular_activities String?
  current_status             Student_Status
  id_document_type           Documentos_Identidad
  id_document_number         String?              @unique
  id_document_image          String?

  student_image String?

  courses Students_Courses[]

  id_current_course Int
  current_course    Courses @relation(fields: [id_current_course], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  representatives Representatives_Students[]
  grades          Student_Grades[]
  schedules       Students_Schedules[]
}

enum Modalities {
  Presencial
  Online
}

model Students_Schedules {
  id          Int      @id @default(autoincrement())
  id_schedule Int
  schedule    Schedule @relation(fields: [id_schedule], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id_student Int
  student    Student @relation(fields: [id_student], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Representatives_Students {
  id                                Int            @id @default(autoincrement())
  id_document_number_representative String
  representative                    Representative @relation(fields: [id_document_number_representative], references: [id_document_number], onDelete: Cascade, onUpdate: Cascade)
  student_id                        Int
  student                           Student        @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Spanish_Days {
  Lunes
  Martes
  Miercoles
  Jueves
  Viernes
  Sabados
  Domingos
}

model Schedule {
  id        Int                  @id @default(autoincrement())
  day       Spanish_Days
  start     String
  end       String
  course    Courses              @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course_id Int
  students  Students_Schedules[]
}

model Courses {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  start_date  DateTime?
  end_date    DateTime?

  price Decimal?
  image String?

  modality Modalities
  level_id Int
  level    Level      @relation(fields: [level_id], references: [id])

  schedules Schedule[]

  students         Students_Courses[]
  current_students Student[]
  evaluations      Evaluation[]
}

enum Student_Status {
  Culminado
  Desertor
  Cursando
  Preinscrito
  No_Admitido
}

model Students_Courses {
  id Int @id @default(autoincrement())

  course     Courses         @relation(fields: [id_course], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_course  Int
  student    Student         @relation(fields: [id_student], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_student Int
  status     Student_Status?
}

model Evaluation {
  id Int @id @default(autoincrement())

  id_course Int
  course    Courses @relation(fields: [id_course], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name        String
  description String
  type        String
  phase       String
  date        DateTime
  status      Evaluation_Status
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  grades Student_Grades[]
}

enum Evaluation_Status {
  ACTIVA
  PENDIENTE
  CALIFICANDO
  COMPLETADA
}

model Student_Grades {
  id Int @id @default(autoincrement())

  id_evaluation Int
  evaluation    Evaluation @relation(fields: [id_evaluation], references: [id], onDelete: Cascade)

  id_student Int
  student    Student @relation(fields: [id_student], references: [id], onDelete: Cascade)

  date_done   DateTime
  weighing    Weighings
  grade       Float
  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Weighings {
  EXCELENTE
  MUY_BIEN
  BIEN
  REGULAR
  REPROBADO
}

model Book {
  id               Int      @id @default(autoincrement())
  title            String
  synopsis         String?
  page_count       Int
  publication_date DateTime
  price            Float?

  photoshop_files_url String?
  PDF_file_url        String?
  illustrations_url   String?

  illustrators      String?
  content_reviewers String?
  keywords          String?

  cover_image    String?
  creation_notes String?

  status                String?
  completion_percentage Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id Int @id @default(autoincrement())

  names      String
  lastNames  String
  birth_date DateTime?

  profession    String?
  work_position String?
  department    String?
  gender        Genders
  phone_number  String
  email         String
  address       String
  country       String
  city          String
  state         String
  civil_status  String

  id_document_type   Documentos_Identidad
  id_document_number String               @unique
  id_document_image  String?
  employee_image     String?

  base_salary         Float?
  bonus               Float?
  status              Employee_Status
  admission_date      DateTime
  start_date_contract DateTime?
  contract_period     Contract_Periods?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

enum Employee_Status {
  Activo
  Inactivo
  Despedido
  Renunciado
  Vacaciones
  Licencia_Por_Enfermedad
  Pasante
  Contratista
}

enum Contract_Periods {
  Mensual
  Trimestral
  Semestral
  Anual
  Indefinido
  Por_Proyecto
  Temporal
}
