// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//#region User Models

model Cuenta {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usuario {
  id          String                @id @default(cuid())
  nombre      String
  cedula      String?               @unique
  tipo_cedula Documentos_Identidad?

  email         String?     @unique
  contrasena    String?     @map("password")
  facialID      String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  rol_nombre    String      @default("Basico")
  accounts      Cuenta[]
  sessions      Session[]
  rol           Rol         @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)
  auditoria     Auditoria[]

  @@map("User")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Rol {
  id          Int              @id @default(autoincrement())
  rol         String           @unique
  descripcion String
  usuarios    Usuario[]
  permisos    Roles_Permisos[]
}

model Roles_Permisos {
  id          Int      @id @default(autoincrement())
  rol_nombre  String
  permiso_key String
  active      Boolean?
  rol         Rol      @relation(fields: [rol_nombre], references: [rol], onDelete: Cascade, onUpdate: Cascade)
  permiso     Permiso  @relation(fields: [permiso_key], references: [key], onDelete: Cascade, onUpdate: Cascade)
}

model Permiso {
  id          Int    @id @default(autoincrement())
  permiso     String
  descripcion String

  key   String           @unique
  roles Roles_Permisos[]
}

//#endregion

enum Documentos_Identidad {
  V
  E
  J
  G
  R
  P
  Partida_Nacimiento
}

enum Generos {
  Femenino
  Masculino
}

model Auditoria {
  id         Int     @id @default(autoincrement())
  id_usuario String
  usuario    Usuario @relation(fields: [id_usuario], references: [id])
  accion     String

  fecha_realizado      DateTime @default(now())
  ultima_actualizacion DateTime @updatedAt
}

model Representative {
  id Int @id @default(autoincrement())

  names     String
  lastNames String
  birthDate DateTime

  profession   String?
  gender       Genders
  phone_number String?
  email        String?
  address      String?
  country      String
  city         String?
  state        String?

  id_document_type   Documentos_Identidad
  id_document_number String               @unique
  id_document_image  String?

  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Genders {
  Masculino
  Femenino
}

model Student {
  id   Int     @id @default(autoincrement())
  uuid String? @unique

  names                      String
  lastNames                  String
  birthDate                  DateTime
  gender                     Genders
  modalidad                  String?
  phone_number               String?
  email                      String?
  address                    String?
  country                    String
  city                       String?
  state                      String?
  extracurricular_activities String?
  current_status             String?
  id_document_type           Documentos_Identidad?
  id_document_number         String?               @unique
  id_document_image          String?

  courses Students_Courses[]

  id_current_course                 Int?
  current_course                    Courses?        @relation(fields: [id_current_course], references: [id])
  representative                    Representative? @relation(fields: [id_document_number_representative], references: [id_document_number])
  id_document_number_representative String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Modalities {
  Presencial
  Online
}

enum Spanish_Days {
  Lunes
  Martes
  Miercoles
  Jueves
  Viernes
  Sabados
  Domingos
}

model Schedule {
  id        Int          @id @default(autoincrement())
  day       Spanish_Days
  start     String
  end       String
  course    Courses      @relation(fields: [course_id], references: [id])
  course_id Int
}

model Courses {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  start_date  DateTime?
  end_date    DateTime?

  price Decimal?
  image String?

  modality Modalities
  level    String?

  schedules Schedule[]

  students         Students_Courses[]
  current_students Student[]
}

enum Student_Status {
  Culminado
  Desertor
  Cursando
  Preinscrito
  No_Admitido
}

model Students_Courses {
  id Int @id @default(autoincrement())

  course     Courses         @relation(fields: [id_course], references: [id])
  id_course  Int
  student    Student         @relation(fields: [id_student], references: [id])
  id_student Int
  status     Student_Status?
}
